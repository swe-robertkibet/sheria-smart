// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  picture       String?
  googleId      String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  accounts      Account[]
  chatSessions  ChatSession[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model ChatSession {
  id              String      @id @default(cuid())
  userId          String
  title           String?
  lastMessageAt   DateTime    @default(now()) @updatedAt
  messageCount    Int         @default(0)
  chatType        ChatType    @default(QUICK_CHAT)
  isArchived      Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  messages        Message[]
  
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, updatedAt(sort: Desc)])
  @@index([userId, isArchived, lastMessageAt(sort: Desc)])
  @@map("chat_sessions")
}

model Message {
  id          String      @id @default(cuid())
  content     String      @db.Text
  role        MessageRole
  sessionId   String
  msgCursor   Int         @default(autoincrement()) @unique
  createdAt   DateTime    @default(now())
  
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId, createdAt(sort: Desc)])
  @@index([sessionId, role, createdAt(sort: Desc)])
  @@index([sessionId, msgCursor(sort: Desc)])
  @@map("messages")
}

enum MessageRole {
  USER
  ASSISTANT
}

enum ChatType {
  QUICK_CHAT
  STRUCTURED_ANALYSIS
}
